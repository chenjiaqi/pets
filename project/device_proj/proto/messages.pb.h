/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Mon Nov 27 19:50:35 2017. */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _TwoState {
    TwoState_E_ON = 1,
    TwoState_E_OFF = 0
} TwoState;
#define _TwoState_MIN TwoState_E_ON
#define _TwoState_MAX TwoState_E_OFF
#define _TwoState_ARRAYSIZE ((TwoState)(TwoState_E_OFF+1))

typedef enum _Retcode {
    Retcode_SUCCESSED = 0,
    Retcode_Failed = 1
} Retcode;
#define _Retcode_MIN Retcode_SUCCESSED
#define _Retcode_MAX Retcode_Failed
#define _Retcode_ARRAYSIZE ((Retcode)(Retcode_Failed+1))

typedef enum _Command {
    Command_E_CMD_AUTH = 1,
    Command_E_CMD_REGISTER = 2,
    Command_E_CMD_UNREGISTER = 3,
    Command_E_CMD_LED = 4,
    Command_E_CMD_BEEP = 5,
    Command_E_CMD_GET_STORE_DATA = 6,
    Command_E_CMD_GET_DEVICE_INFO = 7
} Command;
#define _Command_MIN Command_E_CMD_AUTH
#define _Command_MAX Command_E_CMD_GET_DEVICE_INFO
#define _Command_ARRAYSIZE ((Command)(Command_E_CMD_GET_DEVICE_INFO+1))

typedef enum _CommandResp {
    CommandResp_E_CMD_RESP_AUTH = 1,
    CommandResp_E_CMD_RESP_REGISTER = 2,
    CommandResp_E_CMD_RESP_UNREGISTER = 3,
    CommandResp_E_CMD_RESP_LED = 4,
    CommandResp_E_CMD_RESP_BEEP = 5,
    CommandResp_E_CMD_RESP_GET_STORE_DATA = 6,
    CommandResp_E_CMD_RESP_GET_DEVICE_INFO = 7
} CommandResp;
#define _CommandResp_MIN CommandResp_E_CMD_RESP_AUTH
#define _CommandResp_MAX CommandResp_E_CMD_RESP_GET_DEVICE_INFO
#define _CommandResp_ARRAYSIZE ((CommandResp)(CommandResp_E_CMD_RESP_GET_DEVICE_INFO+1))

typedef enum _FrameType {
    FrameType_E_FRAME_REQUEST = 1,
    FrameType_E_FRAME_RESPONSE = 2
} FrameType;
#define _FrameType_MIN FrameType_E_FRAME_REQUEST
#define _FrameType_MAX FrameType_E_FRAME_RESPONSE
#define _FrameType_ARRAYSIZE ((FrameType)(FrameType_E_FRAME_RESPONSE+1))

typedef enum _RespCode {
    RespCode_E_RESP_CODE_SUCCESS = 0,
    RespCode_E_RESP_CODE_FAILED = 1
} RespCode;
#define _RespCode_MIN RespCode_E_RESP_CODE_SUCCESS
#define _RespCode_MAX RespCode_E_RESP_CODE_FAILED
#define _RespCode_ARRAYSIZE ((RespCode)(RespCode_E_RESP_CODE_FAILED+1))

/* Struct definitions */
typedef struct _RespGetdataParams {
    pb_callback_t info;
/* @@protoc_insertion_point(struct:RespGetdataParams) */
} RespGetdataParams;

typedef struct _CmdRespAuthParams {
    uint32_t timestamp;
    uint32_t random;
    uint32_t random2;
    uint32_t random3;
/* @@protoc_insertion_point(struct:CmdRespAuthParams) */
} CmdRespAuthParams;

typedef struct _CmdTwoStateParams {
    TwoState state;
/* @@protoc_insertion_point(struct:CmdTwoStateParams) */
} CmdTwoStateParams;

typedef PB_BYTES_ARRAY_T(128) RequestMessage_params_t;
typedef struct _RequestMessage {
    FrameType frametype;
    bool has_cmd;
    Command cmd;
    bool has_cmd_resp;
    CommandResp cmd_resp;
    bool has_params;
    RequestMessage_params_t params;
/* @@protoc_insertion_point(struct:RequestMessage) */
} RequestMessage;

typedef struct _RespCommonParams {
    Retcode retcode;
/* @@protoc_insertion_point(struct:RespCommonParams) */
} RespCommonParams;

typedef PB_BYTES_ARRAY_T(24) RespGetDeviceParams_device_id_t;
typedef struct _RespGetDeviceParams {
    RespGetDeviceParams_device_id_t device_id;
    bool has_led_status;
    TwoState led_status;
    bool has_beep_status;
    TwoState beep_status;
    bool has_is_registered;
    bool is_registered;
/* @@protoc_insertion_point(struct:RespGetDeviceParams) */
} RespGetDeviceParams;

typedef struct _StoreInformation {
    uint32_t timestamp;
    bool has_temperture;
    int32_t temperture;
    bool has_humidity;
    int32_t humidity;
/* @@protoc_insertion_point(struct:StoreInformation) */
} StoreInformation;

/* Default values for struct fields */

/* Initializer values for message structs */
#define CmdRespAuthParams_init_default           {0, 0, 0, 0}
#define CmdTwoStateParams_init_default           {(TwoState)0}
#define RespCommonParams_init_default            {(Retcode)0}
#define StoreInformation_init_default            {0, false, 0, false, 0}
#define RespGetdataParams_init_default           {{{NULL}, NULL}}
#define RespGetDeviceParams_init_default         {{0, {0}}, false, (TwoState)0, false, (TwoState)0, false, 0}
#define RequestMessage_init_default              {(FrameType)0, false, (Command)0, false, (CommandResp)0, false, {0, {0}}}
#define CmdRespAuthParams_init_zero              {0, 0, 0, 0}
#define CmdTwoStateParams_init_zero              {(TwoState)0}
#define RespCommonParams_init_zero               {(Retcode)0}
#define StoreInformation_init_zero               {0, false, 0, false, 0}
#define RespGetdataParams_init_zero              {{{NULL}, NULL}}
#define RespGetDeviceParams_init_zero            {{0, {0}}, false, (TwoState)0, false, (TwoState)0, false, 0}
#define RequestMessage_init_zero                 {(FrameType)0, false, (Command)0, false, (CommandResp)0, false, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define RespGetdataParams_info_tag               1
#define CmdRespAuthParams_timestamp_tag          1
#define CmdRespAuthParams_random_tag             2
#define CmdRespAuthParams_random2_tag            3
#define CmdRespAuthParams_random3_tag            4
#define CmdTwoStateParams_state_tag              1
#define RequestMessage_frametype_tag             1
#define RequestMessage_cmd_tag                   2
#define RequestMessage_cmd_resp_tag              3
#define RequestMessage_params_tag                4
#define RespCommonParams_retcode_tag             1
#define RespGetDeviceParams_device_id_tag        1
#define RespGetDeviceParams_led_status_tag       2
#define RespGetDeviceParams_beep_status_tag      3
#define RespGetDeviceParams_is_registered_tag    4
#define StoreInformation_timestamp_tag           1
#define StoreInformation_temperture_tag          2
#define StoreInformation_humidity_tag            3

/* Struct field encoding specification for nanopb */
extern const pb_field_t CmdRespAuthParams_fields[5];
extern const pb_field_t CmdTwoStateParams_fields[2];
extern const pb_field_t RespCommonParams_fields[2];
extern const pb_field_t StoreInformation_fields[4];
extern const pb_field_t RespGetdataParams_fields[2];
extern const pb_field_t RespGetDeviceParams_fields[5];
extern const pb_field_t RequestMessage_fields[5];

/* Maximum encoded size of messages (where known) */
#define CmdRespAuthParams_size                   20
#define CmdTwoStateParams_size                   2
#define RespCommonParams_size                    2
#define StoreInformation_size                    27
/* RespGetdataParams_size depends on runtime parameters */
#define RespGetDeviceParams_size                 32
#define RequestMessage_size                      137

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
