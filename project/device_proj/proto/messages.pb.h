/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Thu Nov 23 14:10:10 2017. */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _State {
    State_E_ON = 1,
    State_E_OFF = 0
} State;
#define _State_MIN State_E_ON
#define _State_MAX State_E_OFF
#define _State_ARRAYSIZE ((State)(State_E_OFF+1))

typedef enum _Command {
    Command_E_CMD_AUTH = 1,
    Command_E_CMD_REGISTER = 2,
    Command_E_CMD_UNREGISTER = 3,
    Command_E_CMD_LED = 4,
    Command_E_CMD_BEEP = 5
} Command;
#define _Command_MIN Command_E_CMD_AUTH
#define _Command_MAX Command_E_CMD_BEEP
#define _Command_ARRAYSIZE ((Command)(Command_E_CMD_BEEP+1))

typedef enum _CommandResp {
    CommandResp_E_CMD_RESP_AUTH = 1,
    CommandResp_E_CMD_RESP_REGISTER = 2,
    CommandResp_E_CMD_RESP_UNREGISTER = 3,
    CommandResp_E_CMD_RESP_LED = 4,
    CommandResp_E_CME_RESP_BEEP = 5
} CommandResp;
#define _CommandResp_MIN CommandResp_E_CMD_RESP_AUTH
#define _CommandResp_MAX CommandResp_E_CME_RESP_BEEP
#define _CommandResp_ARRAYSIZE ((CommandResp)(CommandResp_E_CME_RESP_BEEP+1))

typedef enum _FrameType {
    FrameType_E_FRAME_REQUEST = 1,
    FrameType_E_FRAME_RESPONSE = 2
} FrameType;
#define _FrameType_MIN FrameType_E_FRAME_REQUEST
#define _FrameType_MAX FrameType_E_FRAME_RESPONSE
#define _FrameType_ARRAYSIZE ((FrameType)(FrameType_E_FRAME_RESPONSE+1))

typedef enum _RespCode {
    RespCode_E_RESP_CODE_SUCCESS = 0,
    RespCode_E_RESP_CODE_FAILED = 1
} RespCode;
#define _RespCode_MIN RespCode_E_RESP_CODE_SUCCESS
#define _RespCode_MAX RespCode_E_RESP_CODE_FAILED
#define _RespCode_ARRAYSIZE ((RespCode)(RespCode_E_RESP_CODE_FAILED+1))

/* Struct definitions */
typedef struct _TransInformation {
    pb_callback_t info;
/* @@protoc_insertion_point(struct:TransInformation) */
} TransInformation;

typedef struct _DeviceInfo {
    pb_callback_t device_id;
    bool has_led_status;
    State led_status;
    bool has_beep_status;
    State beep_status;
    bool has_is_registered;
    bool is_registered;
/* @@protoc_insertion_point(struct:DeviceInfo) */
} DeviceInfo;

typedef struct _RequestMessage {
    FrameType frametype;
    bool has_cmd;
    Command cmd;
    bool has_cmd_resp;
    CommandResp cmd_resp;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:RequestMessage) */
} RequestMessage;

typedef struct _StoreInformation {
    uint32_t timestamp;
    bool has_temperture;
    uint32_t temperture;
    bool has_humidity;
    uint32_t humidity;
/* @@protoc_insertion_point(struct:StoreInformation) */
} StoreInformation;

/* Default values for struct fields */

/* Initializer values for message structs */
#define StoreInformation_init_default            {0, false, 0, false, 0}
#define TransInformation_init_default            {{{NULL}, NULL}}
#define DeviceInfo_init_default                  {{{NULL}, NULL}, false, (State)0, false, (State)0, false, 0}
#define RequestMessage_init_default              {(FrameType)0, false, (Command)0, false, (CommandResp)0, {{NULL}, NULL}}
#define StoreInformation_init_zero               {0, false, 0, false, 0}
#define TransInformation_init_zero               {{{NULL}, NULL}}
#define DeviceInfo_init_zero                     {{{NULL}, NULL}, false, (State)0, false, (State)0, false, 0}
#define RequestMessage_init_zero                 {(FrameType)0, false, (Command)0, false, (CommandResp)0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define TransInformation_info_tag                1
#define DeviceInfo_device_id_tag                 1
#define DeviceInfo_led_status_tag                2
#define DeviceInfo_beep_status_tag               3
#define DeviceInfo_is_registered_tag             4
#define RequestMessage_frametype_tag             1
#define RequestMessage_cmd_tag                   2
#define RequestMessage_cmd_resp_tag              3
#define RequestMessage_params_tag                4
#define StoreInformation_timestamp_tag           1
#define StoreInformation_temperture_tag          2
#define StoreInformation_humidity_tag            3

/* Struct field encoding specification for nanopb */
extern const pb_field_t StoreInformation_fields[4];
extern const pb_field_t TransInformation_fields[2];
extern const pb_field_t DeviceInfo_fields[5];
extern const pb_field_t RequestMessage_fields[5];

/* Maximum encoded size of messages (where known) */
#define StoreInformation_size                    17
/* TransInformation_size depends on runtime parameters */
/* DeviceInfo_size depends on runtime parameters */
/* RequestMessage_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MESSAGES_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
